Our server has cellranger-arc-2.0.0 installed, and I want the most recent version since some of these GTF parsing issues might have been corrected.

Download cellranger-arc-2.0.2 here: https://support.10xgenomics.com/single-cell-multiome-atac-gex/software/downloads/latest
Then add it to your path, either in the current session, your personal .bashrc, or at the beginning of a slurm submission script:
export PATH=/path/to/cellranger-arc-2.0.2:$PATH

I've run into some issues using an NCBI-derived GTF. These kinds of issues can be really difficult to solve, and I've found that cellranger-arc can succesfully index a genome and perform "count" right up until the end
when it fails, specifically in the step where a "cloupe" file is made. I don't use the Loupe browser but I also don't have any understanding of its file-types, but the crash, which appears in the stdout and not stderr, 
is apparently associated with parsing the GTF. Therefore, after much trial-and-error, I follow these steps to modify a non-ensembl-formatted GTF such that it works in cellranger-arc. 

Using cellranger-arc, reformat the GTF with gene features of interest. I first check all the "gene_biotype" entries with this command:

cat <your.gtf> | cut -f 9 | tr ';' '\n' | grep "gene_biotype" | sed 's/gene_biotype//' | sort -u > gtf_attributes.txt

And then I run "mkgtf" using only the features of interest:

cellranger mkgtf ../reference_genome/GCF_000188095.3_BIMP_2.2_genomic.gtf ../reference_genome/GCF_000188095.3_BIMP_2.2_genomic_filtered.gtf \
        --attribute=gene_biotype:protein_coding \
        --attribute=gene_biotype:lncRNA \
        --attribute=gene_biotype:pseudogene \
        --attribute=gene_biotype:misc_RNA \
        --attribute=gene_biotype:snRNA \
        --attribute=gene_biotype:snoRNA
	

I then use AGAT (https://agat.readthedocs.io/en/latest/) to modify the GTF. AGAT is by far the best GTF/GFF manipulation tool I've used and, barring a few caveats (it won't let you break certain rules of GTF/GFF formatting).
It's really important that you first edit AGAT's .yaml file to default output GTFs and not GFFs.

Copy the .yaml file into your current directory:

agat config --expose 

You can edit this new .yaml or rename it before editing -- I never recommend editing a .yaml without renaming it =).
The only necessary edit is to modify the "output_format" (Line 7) to read "GTF" and not "GFF."

Next, use AGAT to convert the NCBI GTF to an ENSEMBL-style GTF. Make sure you use the -c flag to recognize the modified .yaml!

agat_sp_ensembl_output_style.pl -g GCF_000188095.3_BIMP_2.2_genomic_filtered.gtf -o bimp2.2_filtered_ensembl.gtf -c agat_config_imot.yaml

This might be a species-specific problem, but my GTF read "gene" where cellranger-arc wanted it to read "gene_name," and this can be solved with a simple regex:

sed -i 's/gene\ \"/gene_name\ "/g' bimp2.2_filtered_ensembl.gtf

Next, we clean up the GTF to include ONLY transcript_id, gene_id, and gene_name, as suggested by 10x. AGAT will do all of this but will NOT remove "Parent" or "ID" as these are "mandatory" attributes. Still, we can
use AGAT to get rid of most attributes.

First, find out what attributes are present in your GTF:

agat_sq_list_attributes.pl -f bimp2.2_filtered_ensembl.gtf -p all -o all_attributes.txt

At the bottom of the "all_attributes.txt" file it compiles a full list of all the attributes in your GTF, independent of feature type. Remove these using this command:

agat_sp_manage_attributes.pl -f bimp2.2_filtered_ensembl.gtf -att anticodon,db_xref,description,exception,exon_id,exon_number,gbkey,gene_biotype,inference,model_evidence,note,partial,product,protein_id,transl_except -p all -o bimp2.2_filtered_ensembl_simple.gtf -c agat_config_imot.yaml

Then get rid of "Parent" and "ID" using regex:

sed -i 's/; ID "[^"]*"//g' bimp2.2_filtered_ensembl_simple.gtf
sed -i 's/; Parent "[^"]*"//g' bimp2.2_filtered_ensembl_simple.gtf

Almost there! cellranger-arc requires "transcript" under gene, and some genes (I think those that are not protein-coding) will report "RNA," which the mkref function will not tolerate. Again, clean these up with regex:

sed 's/\bRNA\b/transcript/g'  bimp2.2_filtered_ensembl_simple.gtf >  bimp2.2_filtered_ensembl_final.gtf

Now you should be good to go to run "mkref" and "count!"
